/*!
********************************************************************************
* @file     : list.h
*
* @brief    :
*
* @version  : V0.0.1
*
* @copyright: All Rights Reserved.
********************************************************************************
* @changelog: L.H.T 2017-10-01 first version
*******************************************************************************/
#ifndef INCLUDE_MENUX_NUXOS_SCORE_LIST_H
#define INCLUDE_MENUX_NUXOS_SCORE_LIST_H

/*
********************************************************************************
* INCLUDES
*******************************************************************************/
#include <config.h>
#include <types.h>

#ifdef __cplusplus
extern "C" {
#endif

/*!
********************************************************************************
* CONTANTS
*******************************************************************************/

/*!
********************************************************************************
* TYPE DEFINES
*******************************************************************************/
struct tx_dnode_s
{
    struct tx_dnode_s *next;                        /**< point to next node. */
    struct tx_dnode_s *prev;                        /**< point to prev node. */
};
typedef struct tx_dnode_s tx_dnode_t, tx_dlist_t;	/**< Type for lists. */

/*
********************************************************************************
* INLINE FUNCTIONS
*******************************************************************************/
/*!
********************************************************************************
* @brief :
*
* @param :
*
* @retval:
*******************************************************************************/
static inline void tx_dlist_init(tx_dlist_t *l)
{
    l->next = l->prev = l;
}

/*!
********************************************************************************
* @brief :
*
* @param :
*
* @retval:
*******************************************************************************/
static inline void tx_dlist_insert_tail(tx_dlist_t *l, tx_dlist_t *n)
{
    l->next->prev = n;
    n->next = l->next;

    l->next = n;
    n->prev = l;
}

/*!
********************************************************************************
* @brief :
*
* @param :
*
* @retval:
*******************************************************************************/
static inline void tx_dlist_insert_head(tx_dlist_t *l, tx_dlist_t *n)
{
    l->prev->next = n;
    n->prev = l->prev;

    l->prev = n;
    n->next = l;
}

/*!
********************************************************************************
* @brief :
*
* @param :
*
* @retval:
*******************************************************************************/
static inline void tx_dlist_remove_node(tx_dlist_t *n)
{
    n->next->prev = n->prev;
    n->prev->next = n->next;

    n->next = n->prev = n;
}

/*!
********************************************************************************
* @brief :
*
* @param :
*
* @retval:
*******************************************************************************/
static inline int tx_dlist_isempty(const tx_dlist_t *l)
{
    return l->next == l;
}

#ifdef __cplusplus
}
#endif
#endif /* INCLUDE_MENUX_NUXOS_SCORE_LIST_H */
